plugins {
    id 'java'
    id 'application'
    id 'eclipse'
    id 'org.openjfx.javafxplugin' version '0.0.8'
}

jar.enabled = true

version = '1.0.9'
sourceCompatibility = '11'

repositories {
    mavenCentral()
    jcenter()

}

sourceSets {
    main {
        java {
            srcDirs = ["com/tacaly/furphobia"]
        }
        resources {
            srcDirs = ['com/tacaly/furphobia/resources']
        }
    }
}

configurations {
    compile.transitive = true

    linux {
        description = 'linux classpath'
        extendsFrom compile
    }

    mac {
        description = 'mac classpath'
        extendsFrom compile
    }

    win {
        description ='win classpath'
        extendsFrom compile
    }
}

def currentOS = org.gradle.internal.os.OperatingSystem.current()
def platform
if (currentOS.isWindows()) {
    platform = 'win'
} else if (currentOS.isLinux()) {
    platform = 'linux'
} else if (currentOS.isMacOsX()) {
    platform = 'mac'
}

dependencies {
    // https://mvnrepository.com/artifact/com.googlecode.soundlibs/jorbis
    compile group: 'com.googlecode.soundlibs', name: 'jorbis', version: '0.0.17.4'
    // https://mvnrepository.com/artifact/com.googlecode.soundlibs/tritonus-share
    compile group: 'com.googlecode.soundlibs', name: 'tritonus-share', version: '0.3.7.4'
    // https://mvnrepository.com/artifact/com.googlecode.soundlibs/vorbisspi
    compile group: 'com.googlecode.soundlibs', name: 'vorbisspi', version: '1.0.3.3'

    implementation "org.openjfx:javafx-media:17.0.0.1:${platform}"
    implementation "org.openjfx:javafx-base:17.0.0.1:${platform}"
    implementation "org.openjfx:javafx-controls:17.0.0.1:${platform}"
    implementation "org.openjfx:javafx-fxml:17.0.0.1:${platform}"
    implementation "org.openjfx:javafx-swing:17.0.0.1:${platform}"
    implementation "org.openjfx:javafx-web:17.0.0.1:${platform}"
    implementation "org.openjfx:javafx-graphics:17.0.0.1:${platform}"

    win 'org.openjfx:javafx-media:17.0.0.1:win'
    win 'org.openjfx:javafx-base:17.0.0.1:win'
    win 'org.openjfx:javafx-controls:17.0.0.1:win'
    win 'org.openjfx:javafx-fxml:17.0.0.1:win'
    win 'org.openjfx:javafx-swing:17.0.0.1:win'
    win 'org.openjfx:javafx-web:17.0.0.1:win'
    win 'org.openjfx:javafx-graphics:17.0.0.1:win'

    linux 'org.openjfx:javafx-media:17.0.0.1:linux'
    linux 'org.openjfx:javafx-graphics:17.0.0.1:linux'
    linux 'org.openjfx:javafx-base:17.0.0.1:linux'
    linux 'org.openjfx:javafx-controls:17.0.0.1:linux'
    linux 'org.openjfx:javafx-fxml:17.0.0.1:linux'
    linux 'org.openjfx:javafx-swing:17.0.0.1:linux'
    linux 'org.openjfx:javafx-web:17.0.0.1:linux'

    mac 'org.openjfx:javafx-media:17.0.0.1:mac'
    mac 'org.openjfx:javafx-graphics:17.0.0.1:mac'
    mac 'org.openjfx:javafx-base:17.0.0.1:mac'
    mac 'org.openjfx:javafx-controls:17.0.0.1:mac'
    mac 'org.openjfx:javafx-fxml:17.0.0.1:mac'
    mac 'org.openjfx:javafx-swing:17.0.0.1:mac'
    mac 'org.openjfx:javafx-web:17.0.0.1:mac'
}

application {
    mainClassName = 'com.tacaly.furphobia.Main'
}

task('linuxJar', type: Jar) {
    appendix = "linux"
    from { configurations.linux.collect { it.isDirectory() ? it : zipTree(it) }}
}

task('macJar', type: Jar) {
    appendix = "mac"
    from { configurations.mac.collect { it.isDirectory() ? it : zipTree(it) }}
}

task('winJar', type: Jar) {
    appendix = "win"
    from { configurations.win.collect { it.isDirectory() ? it : zipTree(it) }}
}

configure([linuxJar, macJar, winJar]) {
    from sourceSets.main.output
    manifest {
        attributes "Main-Class": "com.tacaly.furphobia.Main"
    }
}

jar.dependsOn linuxJar, macJar, winJar